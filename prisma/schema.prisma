// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  stripeCustomerId      String?   @unique
  stripeSubscriptionId  String?   @unique
  stripePriceId         String?
  stripeCurrentPeriodEnd DateTime?
  accounts              Account[]
  sessions              Session[]
  files                 File[]
  folders               Folder[]
  notes                 Note[]
  tokens                Int       @default(1000)
  messages              Message[]
}

model Chat {
  id  String @id @default(cuid())
  messages  Message[]
  note      Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String   // "user" or "system"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String

  @@index([userId])
  @@index([noteId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id          String   @id @default(cuid())
  name        String
  type        String
  size        Int
  url         String
  transcript  String?
  summary     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     File[]
  parentId  String?
  opened    Boolean  @default(false)
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
  notes     Note[]

  @@index([userId])
  @@index([parentId])
}

model Note {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?
  folder      Folder?   @relation(fields: [folderId], references: [id])
  media       Media[]
  messages    Message[]
  chat        Chat[] // I'm not sure how to allow this to only have one chat
  recallSetId String?
}

model Media {
  id          String   @id @default(cuid())
  name        String
  type        String   // "audio"
  url         String
  duration    Int?     // For audio files
  transcript  String?  // For audio files
  summary     String?  // For audio files
  processing  Boolean  @default(false)
  noteId      String
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
